import numpy as np
import plotly.express as px
import pandas as pd
from typing import List, Tuple

class LDPCMatrixGenerator:
    def __init__(self, coding_rate: str, visual: bool = False):
        self.coding_rate = coding_rate
        self.visual = visual

        self.matrices = {
            "1/2": np.array([
                [0, "-", "-", "-", 0, 0, "-", "-", 0, "-", "-", 0, 1, 0, "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"],
                [22, 0, "-", "-", 17, "-", 0, 0, 12, "-", "-", "-", "-", 0, 0, "-", "-", "-", "-", "-", "-", "-", "-", "-"],
                [6, "-", 0, "-", 10, "-", "-", "-", 24, "-", 0, "-", "-", "-", 0, 0, "-", "-", "-", "-", "-", "-", "-", "-"],
                [2, "-", "-", 0, 20, "-", "-", "-", 25, 0, "-", "-", "-", "-", "-", 0, 0, "-", "-", "-", "-", "-", "-", "-"],
                [23, "-", "-", "-", 3, "-", "-", "-", 0, "-", 9, 11, "-", "-", "-", "-", 0, 0, "-", "-", "-", "-", "-", "-"],
                [24, "-", 23, 1, 17, "-", 3, "-", 10, "-", "-", "-", "-", "-", "-", "-", "-", 0, 0, "-", "-", "-", "-", "-"],
                [25, "-", "-", "-", 8, "-", "-", "-", 7, 18, "-", "-", 0, "-", "-", "-", "-", "-", 0, 0, "-", "-", "-", "-"],
                [13, 24, "-", "-", 0, "-", 8, "-", 6, "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", 0, 0, "-", "-", "-"],
                [7, 20, "-", 16, 22, 10, "-", "-", 23, "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", 0, 0, "-", "-"],
                [11, "-", "-", "-", 19, "-", "-", "-", 13, "-", 3, 17, "-", "-", "-", "-", "-", "-", "-", "-", "-", 0, 0, "-"],
                [25, "-", 8, "-", 23, 18, "-", 14, 9, "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", 0, 0],
                [3, "-", "-", "-", 16, "-", "-", 2, 25, 5, "-", "-", 1, "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", 0]
            ]),
            "2/3": np.array([
                [25, 26, 14, "-", 20, "-", 2, "-", 4, "-", "-", 8, "-", 16, "-", 18, 1, 0, "-", "-", "-", "-", "-", "-"],
                [10, 9, 15, 11, "-", 0, "-", 1, "-", "-", 18, "-", 8, "-", 10, "-", "-", 0, 0, "-", "-", "-", "-", "-"],
                [16, 2, 20, 26, 21, "-", 6, "-", 1, 26, "-", 7, "-", "-", "-", "-", "-", "-", 0, 0, "-", "-", "-", "-"],
                [10, 13, 5, 0, "-", 3, "-", 7, "-", "-", 26, "-", "-", 13, "-", 16, "-", "-", "-", 0, 0, "-", "-", "-"],
                [23, 14, 24, "-", 12, "-", 19, "-", 17, "-", "-", "-", 20, "-", 21, "-", 0, "-", "-", "-", 0, 0, "-", "-"],
                [6, 22, 9, 20, "-", 25, "-", 17, "-", 8, "-", 14, "-", 18, "-", "-", "-", "-", "-", "-", "-", 0, 0, "-"],
                [14, 23, 21, 11, 20, "-", 24, "-", 18, "-", 19, "-", "-", "-", "-", 22, "-", "-", "-", "-", "-", "-", 0, 0],
                [17, 11, 11, 20, "-", 21, "-", 26, "-", 3, "-", "-", 18, "-", 26, "-", 1, "-", "-", "-", "-", "-", "-", 0]
            ]),
            "3/4": np.array([
                [16, 17, 22, 24, 9, 3, 14, "-", 4, 2, 7, "-", 26, "-", 2, "-", 21, "-", 1, 0, "-", "-", "-", "-"],
                [25, 12, 12, 3, 3, 26, 6, 21, "-", 15, 22, "-", 15, "-", 4, "-", "-", 16, "-", 0, 0, "-", "-", "-"],
                [25, 18, 26, 16, 22, 23, 9, "-", 0, "-", 4, "-", 4, "-", 8, 23, 11, "-", "-", "-", 0, 0, "-", "-"],
                [9, 7, 0, 1, 17, "-", "-", 7, 3, "-", 3, 23, "-", 16, "-", "-", 21, "-", 0, "-", "-", 0, 0, "-"],
                [24, 5, 26, 7, 1, "-", "-", 15, 24, 15, "-", 8, "-", 13, "-", 13, "-", 11, "-", "-", "-", "-", 0, 0],
                [2, 2, 19, 14, 24, 1, 15, 19, "-", 21, "-", 2, "-", 24, "-", 3, "-", 2, 1, "-", "-", "-", "-", 0]
            ]),
            "5/6": np.array([
                [17, 13, 8, 21, 9, 3, 18, 12, 10, 0, 4, 15, 19, 2, 5, 10, 26, 19, 13, 13, 1, 0, "-", "-"],
                [3, 12, 11, 14, 11, 25, 5, 18, 0, 9, 2, 26, 26, 10, 24, 7, 14, 20, 4, 2, "-", 0, 0, "-"],
                [22, 16, 4, 3, 10, 21, 12, 5, 21, 14, 19, 5, "-", 8, 5, 18, 11, 5, 5, 15, 0, "-", 0, 0],
                [7, 7, 14, 14, 4, 16, 16, 24, 24, 10, 1, 7, 15, 6, 10, 26, 8, 18, 21, 14, 1, "-", "-", 0]
            ])
        }


        if coding_rate in self.matrices:
            self.ldpc_matrix = self.create_ldpc_matrix(self.matrices[coding_rate])
            if visual:
                self.plot_matrix(self.ldpc_matrix)
        else:
            raise ValueError("Invalid coding rate provided.")

    def rotate_matrix(self, matrix, n):
        """Rotate a matrix to the right by n positions."""
        return np.roll(matrix, n, axis=1)

    def create_ldpc_matrix(self, original_matrix, size=27):
        """Create the LDPC matrix from the original matrix."""
        ldpc_rows = []

        for row in original_matrix:
            ldpc_row = []
            for value in row:
                if value == '-':
                    ldpc_row.append(np.zeros((size, size), dtype=int))
                else:
                    n = int(value)
                    identity_matrix = np.eye(size, dtype=int)
                    rotated_matrix = self.rotate_matrix(identity_matrix, n)
                    ldpc_row.append(rotated_matrix)

            ldpc_rows.append(np.hstack(ldpc_row))

        ldpc_matrix = np.vstack(ldpc_rows)
        return ldpc_matrix

    def plot_matrix(self, ldpc_matrix):
        """Plot the LDPC matrix as a heatmap using Plotly Express."""
        ldpc_df = pd.DataFrame(ldpc_matrix)

        fig = px.imshow(
            ldpc_df,
            color_continuous_scale='Viridis',
            title='LDPC Matrix Heatmap',
            labels={'x': 'Columns', 'y': 'Rows'},
            zmin=0,
            zmax=1
        )

        fig.show()
